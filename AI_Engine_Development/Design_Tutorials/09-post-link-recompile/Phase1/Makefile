#  (c) Copyright 2021 Xilinx, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Makefile input options
TARGET ?= hw_emu
PFM := Phase1_container

#Directories
AIE:= ../Files/AIE
PL:=../Files/PL
HwLink:=../Files/HwLink

# Local Install
#LOCAL := /scratch/oliviert/LocalInstall_2021.2
#PLATFORM_DIR := ${LOCAL}/platforms
PLATFORM_DIR := ${PLATFORM_REPO_PATHS}

BASE_PLATFORM := ${PLATFORM_DIR}/xilinx_vck190_base_202120_1/xilinx_vck190_base_202120_1.xpfm

# File names and locations
GRAPH := ${AIE}/src/graph.cpp
GRAPH_O := libadf.a

KERNEL := s2mm.cpp mm2s.cpp polar_clip.cpp
KERNEL_XO := s2mm.xo mm2s.xo polar_clip.xo
CONFIG_FILE := system.cfg


# Command-line options
VPP := v++
AIECC := aiecompiler

AIE_INCLUDE_FLAGS := -include="$(XILINX_VITIS)/aietools/include" -include="${AIE}/src" -include="${AIE}/data" -include="${AIE}/src/aie_kernels" -include="${PL}/src"
AIE_FLAGS := --target=hw $(AIE_INCLUDE_FLAGS) --pl-freq=200 -workdir=./Work

VPP_XO_FLAGS := -c --platform $(BASE_PLATFORM) --save-temps -g
VPP_LINK_FLAGS := -l --platform $(BASE_PLATFORM) $(KERNEL_XO) $(GRAPH_O) -t $(TARGET) --save-temps -g --config ${HwLink}/$(CONFIG_FILE) -o $(PFM).xclbin


.ONESHELL:
.PHONY: clean all kernels aie xclbin

guard-%:
	@#$(${$*}, $(error $* is not set. Run: environment-setup-aarch64-xilinx-linux))

all: kernels aie xclbin

######################################################
# This step compiles the HLS C kernels and creates an ADF Graph
# the %.xo is used as the output and creates from the %.cpp files
# The graph is generated by having the -target=hw
kernels: $(KERNEL_XO)
	@echo "COMPLETE: Kernels Created."

%.xo: ${PL}/src/%.cpp
	$(VPP) $(VPP_XO_FLAGS) -k $(basename $(notdir $<)) $< -o $@

aie: $(GRAPH_O)

aiesim: $(GRAPH_O)
	aiesmulator --pkg-dir=./Work

$(GRAPH_O): $(GRAPH)
	$(AIECC) $(AIE_FLAGS) $(GRAPH)
	@echo "COMPLETE: libadf.a created."
#####################################################

########################################################
# Once the kernels and graph are generated, you can build
# the hardware part of the design. This creates an xclbin
# that will be used to run the design on the platform.
xclbin: $(GRAPH_O) $(KERNEL_XO)
	$(VPP) $(VPP_LINK_FLAGS) || (echo "task: [xclbin] failed error code: $$?"; exit 1)
	@echo "COMPLETE: .xclbin created."
########################################################



clean:
	rm -rf _x v++* $(KERNEL_XO) $(GRAPH_O) *.o *.compile_summary* *.xpe xnwOut *.xclbin* *.log *.xsa Work *.db *.csv *$(PFM)* *.jou .Xil
